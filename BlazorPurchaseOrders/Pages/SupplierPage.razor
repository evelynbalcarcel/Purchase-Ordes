@page "/supplier"
@using BlazorPurchaseOrders.Data
@inject ISupplierService SupplierService
@using Syncfusion.Blazor.Navigations

@attribute [Authorize(Roles = "Admin, Manager")]

<h3>Suppliers</h3>
<br />

<SfGrid DataSource="@supplier"
        Toolbar="@Toolbaritems"
        AllowResizing="true">
    <GridColumns>
        <GridColumn Field="@nameof(Supplier.SupplierName)"
                    HeaderText="Name"
                    TextAlign="TextAlign.Left"
                    Width="40">
        </GridColumn>
        <GridColumn Field="@nameof(Supplier.CombinedAddress)"
                    HeaderText="Address"
                    TextAlign="TextAlign.Left"
                    Width="60">
        </GridColumn>
        <GridColumn Field="@nameof(Supplier.SupplierEmail)"
                    HeaderText="Email"
                    TextAlign="TextAlign.Left"
                    Width="40">
        </GridColumn>
    </GridColumns>
    <GridEvents RowSelected="RowSelectHandler" OnToolbarClick="ToolbarClickHandler" TValue="Supplier"></GridEvents>
</SfGrid>

<SfDialog @ref="DialogAddEditSupplier" IsModal="true" Width="500px" ShowCloseIcon="true"
          Visible="@DialogVisible" VisibleChanged="OnVisibleChanged">
    <DialogTemplates>
        <Header> @HeaderText </Header>
    </DialogTemplates>
    <EditForm Model="@addeditSupplier" OnValidSubmit="@SupplierSave">
        <DataAnnotationsValidator />
        <div>
            <SfTextBox Enabled="true" Placeholder="Supplier Name"
                       FloatLabelType="@FloatLabelType.Auto"
                       @bind-Value="addeditSupplier.SupplierName"></SfTextBox>
            <ValidationMessage For="@(() => addeditSupplier.SupplierName)" />
            <SfTextBox Enabled="true" Placeholder="Address"
                       FloatLabelType="@FloatLabelType.Auto"
                       @bind-Value="addeditSupplier.SupplierAddress1"></SfTextBox>
            <ValidationMessage For="@(() => addeditSupplier.SupplierAddress1)" />
            <SfTextBox Enabled="true" Placeholder=""
                       FloatLabelType="@FloatLabelType.Never"
                       @bind-Value="addeditSupplier.SupplierAddress2"></SfTextBox>
            <ValidationMessage For="@(() => addeditSupplier.SupplierAddress2)" />
            <SfTextBox Enabled="true" Placeholder=""
                       FloatLabelType="@FloatLabelType.Never"
                       @bind-Value="addeditSupplier.SupplierAddress3"></SfTextBox>
            <ValidationMessage For="@(() => addeditSupplier.SupplierAddress3)" />
            <SfTextBox Enabled="true" Placeholder="Post Code"
                       FloatLabelType="@FloatLabelType.Auto"
                       CssClass="ToUpperCase"
                       @bind-Value="addeditSupplier.SupplierPostCode"></SfTextBox>
            <ValidationMessage For="@(() => addeditSupplier.SupplierPostCode)" />
            <SfTextBox Enabled="true" Placeholder="Email"
                       FloatLabelType="@FloatLabelType.Auto"
                       @bind-Value="addeditSupplier.SupplierEmail"></SfTextBox>
            <ValidationMessage For="@(() => addeditSupplier.SupplierEmail)" />
        </div>
        <br /><br />
        <div class="e-footer-content">
            <div class="button-container">
                <button type="submit" class="e-btn e-normal e-primary">Save</button>
                <button type="button" class="e-btn e-normal" @onclick="@CloseDialog">Cancel</button>
            </div>
        </div>
    </EditForm>
</SfDialog>

<SfDialog @ref="DialogDeleteSupplier" IsModal="true" Width="500px" ShowCloseIcon="true"
          Visible="@DialogDeleteVisible" VisibleChanged="OnDeleteVisibleChanged">
    <DialogTemplates>
        <Header> Confirm Delete </Header>
        <Content>
            <SfTextBox Enabled="false" Placeholder="Supplier Name"
                       FloatLabelType="@FloatLabelType.Auto"
                       @bind-Value="addeditSupplier.SupplierName"></SfTextBox>
            <SfTextBox Enabled="false" Placeholder="Address"
                       FloatLabelType="@FloatLabelType.Auto"
                       @bind-Value="addeditSupplier.SupplierAddress1"></SfTextBox>
            <SfTextBox Enabled="false" Placeholder="Address"
                       FloatLabelType="@FloatLabelType.Never"
                       @bind-Value="addeditSupplier.SupplierAddress2"></SfTextBox>
            <SfTextBox Enabled="false" Placeholder="Address"
                       FloatLabelType="@FloatLabelType.Never"
                       @bind-Value="addeditSupplier.SupplierAddress3"></SfTextBox>
            <SfTextBox Enabled="false" Placeholder="Post Code"
                       FloatLabelType="@FloatLabelType.Auto"
                       @bind-Value="addeditSupplier.SupplierAddress3"></SfTextBox>
            <SfTextBox Enabled="false" Placeholder="Email"
                       FloatLabelType="@FloatLabelType.Auto"
                       @bind-Value="addeditSupplier.SupplierEmail"></SfTextBox>
            <br />
            <br />
            <span class="text-danger">Please confirm that you want to delete this record</span>
        </Content>
    </DialogTemplates>
    <DialogButtons>
        <DialogButton Content="Delete" IsPrimary="true" OnClick="@ConfirmDeleteYes" />
        <DialogButton Content="Cancel" IsPrimary="false" OnClick="@ConfirmDeleteNo" />
    </DialogButtons>
</SfDialog>

<WarningPage @ref="Warning" WarningHeaderMessage="@WarningHeaderMessage" WarningContentMessage="@WarningContentMessage" />

<style>
    .e-control-wrapper.ToUpperCase .e-textbox {
        text-transform: uppercase;
    }
</style>

@code {
    // PAGINA QUE GESTIONA LOS PROVEEDORES 

    bool DialogVisible = false;
    bool DialogDeleteVisible = false;

    IEnumerable<Supplier> supplier;
    private List<ItemModel> Toolbaritems = new List<ItemModel>();

    SfDialog DialogAddEditSupplier;
    Supplier addeditSupplier = new Supplier();
    string HeaderText = "";

    WarningPage Warning;
    string WarningHeaderMessage = "";
    string WarningContentMessage = "";

    public int SelectedSupplierId { get; set; } = 0;

    SfDialog DialogDeleteSupplier;


    protected override async Task OnInitializedAsync()
    {
        //Populate the list of Supplier objects from the Supplier table.
        supplier = await SupplierService.SupplierList();

        Toolbaritems.Add(new ItemModel() { Text = "Add", TooltipText = "Add a new Supplier", PrefixIcon = "e-add" });
        Toolbaritems.Add(new ItemModel() { Text = "Edit", TooltipText = "Edit selected Supplier", PrefixIcon = "e-edit" });
        Toolbaritems.Add(new ItemModel() { Text = "Delete", TooltipText = "Delete selected Supplier", PrefixIcon = "e-delete" });
    }

    public async Task ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Text == "Add")
        {
            //Code for adding goes here
            addeditSupplier = new Supplier();             // Ensures a blank form when adding
            HeaderText = "Add Supplier";
            DialogVisible = true;
        }
        if (args.Item.Text == "Edit")
        {
            //Code for editing goes here
            //Check that a Supplier Rate has been selected
            if (SelectedSupplierId == 0)
            {
                WarningHeaderMessage = "Warning!";
                WarningContentMessage = "Please select a Supplier from the grid.";
                Warning.OpenDialog();
            }
            else
            {
                //populate addeditSupplier (temporary data set used for the editing process)
                HeaderText = "Edit Supplier";
                addeditSupplier = await SupplierService.Supplier_GetOne(SelectedSupplierId);
                DialogVisible = true;
            }

        }
        if (args.Item.Text == "Delete")
        {
            //code for deleting goes here
            if (SelectedSupplierId == 0)
            {
                WarningHeaderMessage = "Warning!";
                WarningContentMessage = "Please select a Supplier from the grid.";
                Warning.OpenDialog();
            }
            else
            {
                //populate addeditSupplier (temporary data set used for the editing process)
                HeaderText = "Delete Supplier";
                addeditSupplier = await SupplierService.Supplier_GetOne(SelectedSupplierId);
                DialogDeleteVisible = true;
            }
        }
    }

    protected async Task SupplierSave()
    {
        if (addeditSupplier.SupplierID == 0)
        {
            int Success = await SupplierService.SupplierInsert(addeditSupplier.SupplierName,
                addeditSupplier.SupplierAddress1,
                addeditSupplier.SupplierAddress2,
                addeditSupplier.SupplierAddress3,
                addeditSupplier.SupplierPostCode,
                addeditSupplier.SupplierEmail
                );
            if (Success != 0)
            {
                //Supplier Rate already exists
                WarningHeaderMessage = "Warning!";
                WarningContentMessage = "This Supplier Description already exists; it cannot be added again.";
                Warning.OpenDialog();
                // Data is left in the dialog so the user can see the problem.
            }
            else
            {
                // Clears the dialog and is ready for another entry
                // User must specifically close or cancel the dialog
                addeditSupplier = new Supplier();
            }
        }
        else
        {
            // Item is being edited
            int Success = await SupplierService.SupplierUpdate(
                SelectedSupplierId,
                addeditSupplier.SupplierName,
                addeditSupplier.SupplierAddress1,
                addeditSupplier.SupplierAddress2,
                addeditSupplier.SupplierAddress3,
                addeditSupplier.SupplierPostCode,
                addeditSupplier.SupplierEmail,
                addeditSupplier.SupplierIsArchived);
            if (Success != 0)
            {
                //Supplier Rate already exists
                WarningHeaderMessage = "Warning!";
                WarningContentMessage = "This Supplier already exists; it cannot be added again.";
                Warning.OpenDialog();
            }
            else
            {
                DialogVisible = false;
                this.StateHasChanged();
                addeditSupplier = new Supplier();
                SelectedSupplierId = 0;
            }
        }

        //Always refresh datagrid
        supplier = await SupplierService.SupplierList();
        StateHasChanged();
    }

    private async Task CloseDialog()
    {
        DialogVisible = false;
    }

    public void RowSelectHandler(RowSelectEventArgs<Supplier> args)
    {
        //{args.Data} returns the current selected records.
        SelectedSupplierId = args.Data.SupplierID;
    }

    private void OnVisibleChanged(bool value)
    {
        DialogVisible = value;
    }

    private void OnDeleteVisibleChanged(bool value)
    {
        DialogDeleteVisible = value;
    }

    public async void ConfirmDeleteNo()
    {
        DialogDeleteVisible = false;
        SelectedSupplierId = 0;
    }

    public async void ConfirmDeleteYes()
    {
        int Success = await SupplierService.SupplierUpdate(

            SelectedSupplierId,
                addeditSupplier.SupplierName,
                addeditSupplier.SupplierAddress1,
                addeditSupplier.SupplierAddress2,
                addeditSupplier.SupplierAddress3,
                addeditSupplier.SupplierPostCode,
                addeditSupplier.SupplierEmail,
                addeditSupplier.SupplierIsArchived = true);
        if (Success != 0)
        {
            //Supplier Rate already exists - THis should never happen when marking a record 'IsArchived'.
            WarningHeaderMessage = "Warning!";
            WarningContentMessage = "Unknown error has occurred - the record has not been deleted!";
            Warning.OpenDialog();
        }
        else
        {
            DialogDeleteVisible = false;
            supplier = await SupplierService.SupplierList();
            this.StateHasChanged();
            addeditSupplier = new Supplier();
            SelectedSupplierId = 0;
        }
    }
}